---
import LanguageToggle from "../components/LanguageToggle.astro";
import ThemeToggle from "../components/ThemeToggle.astro";
---

<html>
  <body>
    <div class="header">
      <div class="option outline-slate-300">
        <ThemeToggle />
      </div>
      <div class="option outline-slate-300">
        <LanguageToggle />
      </div>
      <div class="logo-container shadow-md outline-slate-300 z-30">
        <img src="/logo.svg" alt="" />
      </div>
    </div>
    <slot />
  </body>
  <style type="scss">
    .header {
      position: fixed;
      top: 2rem;
      right: 0;
      z-index: 100;
      display: flex;
      height: 3.125rem;
      gap: 1rem;
    }

    .logo-container {
      padding-right: 2rem;
      padding-left: 1rem;
      border-radius: 3rem 0 0 3rem;
      background-color: #fff;
    }

    .option {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 3.125rem;
      height: 3.125rem;
      border-radius: 9999px;
      background-color: #fff;
      transition: 1s;
    }

    .outline-slate-300 {
      outline-width: .5px;
      outline-style: solid;
    }
  </style>
  <script>
    const hero = document.querySelector("#hero");
    let intersectingHeroSection = true;

    if (hero) {
      const header = document.querySelector(".header");
      const options = document.getElementsByClassName("option");

      const showOptions = () => {
        const optionsArray = Array.from(options);
        optionsArray.forEach((option) => {
          option.setAttribute("style", "transform: translateX(0)");
          option.classList.add("shadow-md");
        });
      };

      const hideOptions = () => {
        const optionsArray = Array.from(options);
        optionsArray.reverse().forEach((option, index) => {
          option.setAttribute(
            "style",
            `transform: translateX(${100 * (index + 1)}px)`
          );
          option.classList.remove("shadow-md");
        });
      };

      const observe = () => {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              if (intersectingHeroSection === false) {
                intersectingHeroSection = true;
                showOptions();
              }
            } else {
              if (intersectingHeroSection === true) {
                intersectingHeroSection = false;
                hideOptions();
              }
            }
          });
        });

        observer.observe(hero);
      };

      document.addEventListener("scroll", observe);

      header?.addEventListener(
        "mouseenter",
        () => intersectingHeroSection === false && showOptions()
      );
      header?.addEventListener(
        "mouseleave",
        () => intersectingHeroSection === false && hideOptions()
      );
    }
  </script>
</html>
