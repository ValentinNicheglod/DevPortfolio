<style>
  @import url(/src/styles/variables/easings.scss);

  .theme-toggle {
    --size: 2rem;
    --icon-fill: hsl(210 10% 30%);
    --icon-fill-hover: #fdb813;
    display: flex;
    align-items: center;
    justify-content: center;
    background: none;
    border: none;
    padding: 0;
    inline-size: var(--size);
    block-size: var(--size);
    aspect-ratio: 1;
    border-radius: 50%;
    cursor: pointer;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
    outline-offset: 5px;
  }

  :global([data-theme="dark"]) .theme-toggle {
    --icon-fill-hover: #c9c9c9;
  }

  .sun-and-moon > :is(.moon, .sun, .sun-beams) {
    transform-origin: center;
  }

  .theme-toggle > .sun-and-moon > :is(.moon, .sun) {
    fill: var(--icon-fill);
    transition: 0.5s;
  }

  .theme-toggle:is(:hover, :focus-visible) > .sun-and-moon > :is(.moon, .sun) {
    fill: var(--icon-fill-hover);
  }

  .theme-toggle > .sun-and-moon > .sun-beams {
    stroke: var(--icon-fill);
    stroke-width: 2px;
  }

  .theme-toggle:is(:hover, :focus-visible) .sun-and-moon > .sun-beams {
    stroke: var(--icon-fill-hover);
  }

  .sun-and-moon > :is(.moon, .sun) {
    fill: var(--icon-fill);
  }

  .theme-toggle:is(:hover, :focus-visible) > .sun-and-moon > :is(.moon, .sun) {
    fill: var(--icon-fill-hover);
  }

  .sun-and-moon > .sun-beams {
    stroke: var(--icon-fill);
    stroke-width: 2px;
  }

  .theme-toggle:is(:hover, :focus-visible) .sun-and-moon > .sun-beams {
    stroke: var(--icon-fill-hover);
  }

  :global([data-theme="dark"]) .sun-and-moon > .sun {
    transform: scale(1.75);
  }

  :global([data-theme="dark"]) .sun-and-moon > .sun-beams {
    opacity: 0;
  }

  :global([data-theme="dark"]) .sun-and-moon > .moon > circle {
    transform: translateX(-7px);
  }

  @supports (cx: 1) {
    :global([data-theme="dark"]) .sun-and-moon > .moon > circle {
      cx: 17;
      transform: translateX(0);
    }
  }

  @media (prefers-reduced-motion: no-preference) {
    .sun-and-moon > .sun {
      transition: transform 0.5s var(--ease-elastic-3);
    }

    .sun-and-moon > .sun-beams {
      transition:
        transform 0.5s var(--ease-elastic-4),
        opacity 0.5s var(--ease-3);
    }

    .sun-and-moon .moon > circle {
      transition: transform 0.25s var(--ease-out-5);
    }

    @supports (cx: 1) {
      .sun-and-moon .moon > circle {
        transition: cx 0.25s var(--ease-out-5);
      }
    }

    :global([data-theme="dark"]) .sun-and-moon > .sun {
      transition-timing-function: var(--ease-3);
      transition-duration: 0.25s;
      transform: scale(1.75);
    }

    :global([data-theme="dark"]) .sun-and-moon > .sun-beams {
      transition-duration: 0.15s;
      transform: rotateZ(-25deg);
    }

    :global([data-theme="dark"]) .sun-and-moon > .moon > circle {
      transition-duration: 0.5s;
      transition-delay: 0.25s;
    }
  }
</style>

<button
  class="theme-toggle"
  id="theme-toggle"
  aria-label="auto"
  aria-live="polite"
>
  <svg
    class="sun-and-moon"
    aria-hidden="true"
    width="24"
    height="24"
    viewBox="0 0 24 24"
  >
    <mask class="moon" id="moon-mask">
      <rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
      <circle cx="24" cy="10" r="6" fill="black"></circle>
    </mask>
    <circle
      class="sun"
      cx="12"
      cy="12"
      r="6"
      mask="url(#moon-mask)"
      fill="currentColor"
    >
    </circle>
    <g class="sun-beams" stroke="currentColor">
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </g>
  </svg>
</button>

<script is:inline>
  const storageKey = "theme-preference";

  const onClick = () => {
    theme.value = theme.value === "light" ? "dark" : "light";
    setPreference();
  };

  const getColorPreference = () => {
    if (localStorage.getItem(storageKey)) {
      return localStorage.getItem(storageKey);
    } else {
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }
  };

  const setPreference = () => {
    localStorage.setItem(storageKey, theme.value || "");
    reflectPreference();
  };

  const reflectPreference = () => {
    document.firstElementChild?.setAttribute("data-theme", theme.value || "");
  };

  const theme = {
    value: getColorPreference(),
  };

  reflectPreference();

  window.onload = () => {
    reflectPreference();

    document.querySelector("#theme-toggle")?.addEventListener("click", onClick);
  };

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", ({ matches: isDark }) => {
      theme.value = isDark ? "dark" : "light";
      setPreference();
    });
</script>
